// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module cheshire_register_file_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 5
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  input  cheshire_register_file_reg_pkg::cheshire_register_file_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import cheshire_register_file_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [15:0] version_qs;
  logic [31:0] scratch_0_qs;
  logic [31:0] scratch_0_wd;
  logic scratch_0_we;
  logic [31:0] scratch_1_qs;
  logic [31:0] scratch_1_wd;
  logic scratch_1_we;
  logic [31:0] scratch_2_qs;
  logic [31:0] scratch_2_wd;
  logic scratch_2_we;
  logic [31:0] scratch_3_qs;
  logic [31:0] scratch_3_wd;
  logic scratch_3_we;
  logic [1:0] boot_mode_qs;
  logic boot_mode_re;
  logic fll_lock_qs;
  logic fll_lock_re;

  // Register instances
  // R[version]: V(False)

  // constant-only read
  assign version_qs = 16'h1;



  // Subregister 0 of Multireg scratch
  // R[scratch_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_0_we),
    .wd     (scratch_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (scratch_0_qs)
  );

  // Subregister 1 of Multireg scratch
  // R[scratch_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_1_we),
    .wd     (scratch_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (scratch_1_qs)
  );

  // Subregister 2 of Multireg scratch
  // R[scratch_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_2_we),
    .wd     (scratch_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (scratch_2_qs)
  );

  // Subregister 3 of Multireg scratch
  // R[scratch_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_3_we),
    .wd     (scratch_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (scratch_3_qs)
  );


  // R[boot_mode]: V(True)

  prim_subreg_ext #(
    .DW    (2)
  ) u_boot_mode (
    .re     (boot_mode_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.boot_mode.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (boot_mode_qs)
  );


  // R[fll_lock]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_fll_lock (
    .re     (fll_lock_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fll_lock.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fll_lock_qs)
  );




  logic [6:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == CHESHIRE_REGISTER_FILE_VERSION_OFFSET);
    addr_hit[1] = (reg_addr == CHESHIRE_REGISTER_FILE_SCRATCH_0_OFFSET);
    addr_hit[2] = (reg_addr == CHESHIRE_REGISTER_FILE_SCRATCH_1_OFFSET);
    addr_hit[3] = (reg_addr == CHESHIRE_REGISTER_FILE_SCRATCH_2_OFFSET);
    addr_hit[4] = (reg_addr == CHESHIRE_REGISTER_FILE_SCRATCH_3_OFFSET);
    addr_hit[5] = (reg_addr == CHESHIRE_REGISTER_FILE_BOOT_MODE_OFFSET);
    addr_hit[6] = (reg_addr == CHESHIRE_REGISTER_FILE_FLL_LOCK_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(CHESHIRE_REGISTER_FILE_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(CHESHIRE_REGISTER_FILE_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(CHESHIRE_REGISTER_FILE_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(CHESHIRE_REGISTER_FILE_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(CHESHIRE_REGISTER_FILE_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(CHESHIRE_REGISTER_FILE_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(CHESHIRE_REGISTER_FILE_PERMIT[6] & ~reg_be)))));
  end

  assign scratch_0_we = addr_hit[1] & reg_we & !reg_error;
  assign scratch_0_wd = reg_wdata[31:0];

  assign scratch_1_we = addr_hit[2] & reg_we & !reg_error;
  assign scratch_1_wd = reg_wdata[31:0];

  assign scratch_2_we = addr_hit[3] & reg_we & !reg_error;
  assign scratch_2_wd = reg_wdata[31:0];

  assign scratch_3_we = addr_hit[4] & reg_we & !reg_error;
  assign scratch_3_wd = reg_wdata[31:0];

  assign boot_mode_re = addr_hit[5] & reg_re & !reg_error;

  assign fll_lock_re = addr_hit[6] & reg_re & !reg_error;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[15:0] = version_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = scratch_0_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = scratch_1_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = scratch_2_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = scratch_3_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[1:0] = boot_mode_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = fll_lock_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
